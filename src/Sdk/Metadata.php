<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace Proximax\Sdk;

use Proximax\API\MetadataRoutesApi;
use Proximax\ApiClient;
use Proximax\Model\AccountDTO;
use Proximax\Model\PaginationDTO;
use Proximax\Model\UInt64DTO;
use Proximax\Model\AddressMetadataDTO;
use Proximax\Model\MosaicMetadataDTO;
use Proximax\Model\NamespaceMetadataDTO;
use Proximax\Model\FieldDTO;

/**
 * Metadata class Doc Comment
 *
 * @category class
 * @package  Proximax
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Metadata{

    /**
     *
     * @param config $config
     *
     * @param String $accountId
     * 
     * @return AddressMetadataInfoDTO
     */
    public function GetMetadataAccount($config, $accountId){
        $metadataRoutesApi = new MetadataRoutesApi;
        $ApiClient = new ApiClient;
        $url = $config->BaseURL;
        $ApiClient->setHost($url);
        $networkType = $config->NetworkType;

        $data = $metadataRoutesApi->getMetadataAccount($accountId);
        
        if ($data[1] == 200){ // successfull
            return $this->formatMetadata($networkType, $data[0]);
        }
        else return null;
    }

    /**
     *
     * @param config $config
     *
     * @param String $accountId
     * 
     * @return AddressMetadataInfoDTO
     */
    public function GetMetadataNamespace($config, $namespaceId){
        $metadataRoutesApi = new MetadataRoutesApi;
        $ApiClient = new ApiClient;
        $url = $config->BaseURL;
        $ApiClient->setHost($url);
        $networkType = $config->NetworkType;

        $data = $metadataRoutesApi->getMetadataNamespace($namespaceId);
        
        if ($data[1] == 200){ // successfull
            return $this->formatMetadata($networkType, $data[0]);
        }
        else return null;
    }


    /**
     *
     * @param config $config
     *
     * @param String $accountId
     *
     * @return AddressMetadata
     */
    public function GetMetadata($config, $accountId){
        $metadataRoutesApi = new MetadataRoutesApi;
        $ApiClient = new ApiClient;
        $url = $config->BaseURL;
        $ApiClient->setHost($url);
        $networkType = $config->NetworkType;

        $data = $metadataRoutesApi->getMetadata($accountId);

        if ($data[1] == 200){ // successfull
            return $this->formatMetadata($networkType, $data[0]);
        }
        else return null;
    }

    /**
     *
     * @param config $config
     *
     * @param String $accountId
     *
     * @return AddressMetadata
     */
    public function GetMetadatas($config, $accountIds){
        $metadataRoutesApi = new MetadataRoutesApi;
        $ApiClient = new ApiClient;
        $url = $config->BaseURL;
        $ApiClient->setHost($url);
        $networkType = $config->NetworkType;

        $data = $metadataRoutesApi->getMetadatas($accountIds);
        $arr_metadata = array();
        if ($data[1] == 200){ // successfull
            for ($i=0;$i<count($data[0]);$i++){
                $metadata = $this->formatMetadata($networkType, $data[0][$i]);
                $arr_metadata[$i] = $metadata;
            }
        }

        return $arr_metadata;
    }

    /**
     *
     * @param config $config
     *
     * @param String $accountId
     *
     * @return AddressMetadata
     */
    public function SearchMetada($config, $params){
        $metadataRoutesApi = new MetadataRoutesApi;
        $ApiClient = new ApiClient;
        $url = $config->BaseURL;
        $ApiClient->setHost($url);
        $networkType = $config->NetworkType;

        $data = $metadataRoutesApi->searchMetadata($params);
        $arr_metadata = array();

        var_dump($data[1]); die;

        if ($data[1] == 200){ // successfull
            for ($i=0;$i<count($data[0]);$i++){
                $metadata = $this->formatMetadata($networkType, $data[0][$i]);
                $arr_metadata[$i] = $metadata;
            }
        }


        $metadataDTO = array(
            'data' => $arr_metadata,
            'pagination' => new PaginationDTO($data[0]->pagination),
        );

        return $arr_metadata;
    }

    /**
     * @param int $networkType
     *
     * @param array $data
     * 
     * @return AddressMetadataInfoDTO, MosaicMetadataInfoDTO, NamespaceMetadataInfoDTO
     */
    public function formatMetadata($networkType, $data){

        $metadataType = $data->metadataEntry->metadataType;
        $metadataId = $data->id;
        $metadataDTO = array(
            'metadataEntry' => $data->metadataEntry,
            'id' => $metadataId,
        );

        if ($metadataType == 1){
            return new AddressMetadataDTO($metadataDTO);
        }
        else if ($metadataType == 2){
            return new MosaicMetadataDTO($metadataDTO);
        }
        else if ($metadataType == 3){
            return new NamespaceMetadataDTO($metadataDTO);
        }
    }

}
?>