<?php
/**
 * NIS2 API
 *
 * This document defines all the nis2 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: greg@evias.be
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 * 
 */

namespace Proximax\Sdk;
use Proximax\API\MosaicRoutesApi;
use Proximax\ApiClient;
use Proximax\Model\MosaicInfoDTO;
use Proximax\Model\Account;
use Proximax\Model\MosaicLevyDTO;
/**
 * Mosaic class Doc Comment
 *
 * @category class
 * @package  Proximax
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Mosaic{
    /**
     *
     * @param config $config
     *
     * @param mosaicId $mosaicId
     * 
     * @return MosaicInfoDTO
     */
    public function GetMosaicInfo($config, $mosaicId){
        $MosaicRoutesApi = new MosaicRoutesApi;
        $ApiClient = new ApiClient;
        $url = $config->BaseURL;
        $ApiClient->setHost($url);
        $networkType = $config->NetworkType;

        $data = $MosaicRoutesApi->getMosaic($mosaicId);
        if ($data[1] == 200){ // successfull
            $mosaicInfo = $this->formatData($networkType, $data[0]);
        }
        else $mosaicInfo = null;

        return new MosaicInfoDTO($mosaicInfo);
    }

    /**
     *
     * @param config $config
     *
     * @param mosaicIds $mosaicId array
     * 
     * @return MosaicInfoDTO array
     */
    public function GetMosaicsInfo($config, $mosaicIds){
        $MosaicRoutesApi = new MosaicRoutesApi;
        $ApiClient = new ApiClient;

        $url = $config->BaseURL;
        $ApiClient->setHost($url);
        $networkType = $config->NetworkType;

        $data = $MosaicRoutesApi->getMosaics($mosaicIds);
        $arr_mosaic = array();
        if ($data[1] == 200){ // successfull
            for ($i=0;$i<count($data[0]);$i++){
                $mosaic = $this->formatData($networkType, $data[0][$i]);
                $MosaicInfoDTO = new MosaicInfoDTO($mosaic);
                $arr_mosaic[$i] = $MosaicInfoDTO;
            }
        }
        return $arr_mosaic;
    }

    /**
     *
     * @param config $config
     *
     * @param mosaicIds $mosaicId array
     *
     * @return MosaicInfoDTO array
     */
    public function GetMosaicLevy($config, $mosaicIds){
        $MosaicRoutesApi = new MosaicRoutesApi;
        $ApiClient = new ApiClient;

        $url = $config->BaseURL;
        $ApiClient->setHost($url);
        $networkType = $config->NetworkType;

        $data = $MosaicRoutesApi->getMosaicLevy($mosaicIds);
        if ($data[1] == 200){ // successfull
                return new MosaicLevyDTO($data[0]);
        }
        return null;
    }


    /**
     * @param int $networkType
     *
     * @param array $data
     * 
     * @return MosaicInfoDTO array
     */
    private function formatData($networkType, $data){
        $id = $data->meta->id;
        $mosaicId = $data->mosaic->mosaicId;
        $supply = $data->mosaic->supply;
        $height = $data->mosaic->height;
        $owner = (new Account)->newAccountFromPublicKey($data->mosaic->owner,$networkType);
        $revision = $data->mosaic->revision;
        $properties = $data->mosaic->properties;

        $mosaicInfo = array(
            'id' => $id,
            'mosaicId' => $mosaicId,
            'supply' => $supply,
            'height' => $height,
            'owner' => $owner,
            'revision' => $revision,
            'properties' => $properties
        );
        return $mosaicInfo;
    }
}
?>